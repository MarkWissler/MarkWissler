{"version":3,"sources":["Components/Terrain/index.js","App.js","serviceWorker.js","index.js"],"names":["Terrain","props","useEffect","scene","THREE","terrainCanvas","document","getElementById","renderer","canvas","setSize","window","innerWidth","innerHeight","aspect","camera","position","set","rotation","order","y","Math","PI","x","atan","sqrt","controls","OrbitControls","domElement","enableZoom","enablePan","maxPolarAngle","add","light","geometry","material","group","i","j","newMesh","render","sin","Date","now","requestAnimationFrame","id","App","className","Boolean","location","hostname","match","console","log","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uPA2DeA,MAvDf,SAAkBC,GAkDd,OAjDAC,qBAAU,WACN,IAAMC,EAAQ,IAAIC,IAEZC,EAAgBC,SAASC,eAAe,iBACxCC,EAAW,IAAIJ,IAAoB,CACrCK,OAAQJ,IAEZG,EAASE,QAASC,OAAOC,WAAYD,OAAOE,aAO5C,IAAMC,EAASH,OAAOC,WAAaD,OAAOE,YAEpCE,EAAS,IAAIX,KADT,GACyCU,EADzC,GACqDA,EADrD,OACqE,KAAO,KACtFC,EAAOC,SAASC,IAAK,GAAI,GAAI,IACnCF,EAAOG,SAASC,MAAQ,MACxBJ,EAAOG,SAASE,GAAMC,KAAKC,GAAK,EAC1BP,EAAOG,SAASK,EAAIF,KAAKG,MAAQ,EAAIH,KAAKI,KAAM,IAEhD,IAAMC,EAAW,IAAIC,IAAeZ,EAAQP,EAASoB,YAErDF,EAASG,YAAa,EACtBH,EAASI,WAAY,EACrBJ,EAASK,cAAgBV,KAAKC,GAAK,EAEnCnB,EAAM6B,IAAK,IAAI5B,IAAoB,UAEnC,IAAM6B,EAAQ,IAAI7B,IAAkB,SAAU,IAC9C6B,EAAMjB,SAASC,IAAK,EAAG,GAAI,IAC3Bd,EAAM6B,IAAKC,GAKX,IAHA,IAAMC,EAAW,IAAI9B,IAAmB,GAAI,GAAI,IAC1C+B,EAAW,IAAI/B,IACfgC,EAAQ,IAAIhC,IACTiC,GAAK,EAAGA,EAAI,EAAGA,IACpB,IAAK,IAAIC,GAAK,EAAGA,EAAI,EAAGA,IAAK,CACzB,IAAMC,EAAU,IAAInC,IAAY8B,EAAUC,GAC1CI,EAAQvB,SAASC,IAAM,GAAFoB,EAAK,EAAK,GAAFC,GAC7BF,EAAMJ,IAAIO,GAIlBpC,EAAM6B,IAAII,GApCV,SAASI,IACLhC,EAASgC,OAAQrC,EAAOY,GACxBZ,EAAMe,SAASE,EAAIC,KAAKoB,IAAe,KAAXC,KAAKC,OACjCC,sBAAsBJ,GAmC1BA,MAGA,4BAAQK,GAAG,mB,MCtCJC,MAbf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,mCAGA,kBAAC,EAAD,SCCYC,QACW,cAA7BrC,OAAOsC,SAASC,UAEe,UAA7BvC,OAAOsC,SAASC,UAEhBvC,OAAOsC,SAASC,SAASC,MACvB,2DCZNC,QAAQC,IAAI,QACZC,IAASd,OACP,kBAAC,IAAMe,WAAP,KACE,kBAAC,EAAD,OAEFjD,SAASC,eAAe,SDwHpB,kBAAmBiD,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLX,QAAQW,MAAMA,EAAMC,c","file":"static/js/main.1828b5f7.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\n\nfunction Terrain (props) {\n    useEffect(() => {\n        const scene = new THREE.Scene();\n        // renderer\n        const terrainCanvas = document.getElementById(\"terrainCanvas\");\n        const renderer = new THREE.WebGLRenderer({\n            canvas: terrainCanvas,\n        });\n        renderer.setSize( window.innerWidth, window.innerHeight );\n\n        function render () {\n            renderer.render( scene, camera );\n            scene.rotation.y = Math.sin(Date.now()*0.0001);\n            requestAnimationFrame(render);\n        }\n        const aspect = window.innerWidth / window.innerHeight;\n        const d = 20;\n        const camera = new THREE.OrthographicCamera( - d * aspect, d * aspect, d, - d, 0.001, 1000 );\n        camera.position.set( 20, 20, 20 );\n\t\tcamera.rotation.order = 'YXZ';\n\t\tcamera.rotation.y = - Math.PI / 4;\n        camera.rotation.x = Math.atan( - 1 / Math.sqrt( 2 ) );\n        \n        const controls = new OrbitControls( camera, renderer.domElement );\n        // controls.addEventListener( 'change', render );\n        controls.enableZoom = false;\n        controls.enablePan = false;\n        controls.maxPolarAngle = Math.PI / 2;\n\n        scene.add( new THREE.AmbientLight( 0x444444 ) );\n        \n        const light = new THREE.PointLight( 0xffffff, 0.8 );\n        light.position.set( 0, 50, 50 );\n        scene.add( light );\n\n        const geometry = new THREE.BoxGeometry( 10, 10, 10 );\n        const material = new THREE.MeshNormalMaterial();\n        const group = new THREE.Object3D();\n        for (let i = -5; i < 5; i++) {\n            for (let j = -5; j < 5; j++) {\n                const newMesh = new THREE.Mesh( geometry, material );\n                newMesh.position.set(i*12,0, j*12);\n                group.add(newMesh);\n            }\n        }\n\n        scene.add(group);\n        \n        render();\n    });\n    return (\n        <canvas id=\"terrainCanvas\" />\n    ); \n};\n\nexport default Terrain;","import React from 'react';\nimport Terrain from './Components/Terrain';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Mark\n        </p>\n        <Terrain />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconsole.log(\"test\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}